services:
  db:
    image: postgres:17.5-alpine
    container_name: pg-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 120s
    restart: always
    networks:
      - app-net

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"
    volumes:
      - zookeeper-data:/var/lib/zookeeper
    healthcheck:
      test: ["CMD", "echo", "ruok"]
      interval: 35s
      timeout: 20s
      retries: 3
      start_period: 120s
    restart: always
    networks:
      - app-net

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 9092 || exit 1"]
      interval: 35s
      timeout: 20s
      retries: 5
      start_period: 120s
    restart: always
    networks:
      - app-net

  kafka-init:
    image: wurstmeister/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./services/initReaderWriter:/scripts
    entrypoint: ["/bin/sh", "/scripts/init-topics.sh"]
    networks:
      - app-net

  redis:
    image: redis:latest
    container_name: redis-cache
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - app-net

  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: my-app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    env_file:
      - .env
    ports:
      - "${APP_PORT}:${APP_PORT}"
    restart: no
    networks:
      - app-net

volumes:
  postgres-data:
    name: postgres-data
  redis-data:
    name: redis-data
  zookeeper-data:
    name: zookeeper-data
  kafka-data:
    name: kafka-data

networks:
  app-net:
    driver: bridge
    name: app-net

